type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    {'д': 0.051, 'а': 0.07, 'н': 0.051, 'о': 0.113, 'е': 0.089, 'п': 0.035, 'р': 0.051, 'л': 0.062, 'ж': 0.008, 'и': 0.054, 'б': 0.019, 'у': 0.019, 'т': 0.07, 'з': 0.008, 'в': 0.054, 'ь': 0.023, 'с': 0.062, 'я': 0.016, 'ы': 0.019, 'к': 0.023, 'ч': 0.008, 'г': 0.004, 'м': 0.031, 's': 0.004, 'p': 0.004, 'l': 0.004, 'i': 0.008, 't': 0.004, 'х': 0.012, 'ф': 0.004, 'щ': 0.004, 'ю': 0.004, 'j': 0.004, 'o': 0.004, 'n': 0.004}
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 51
    length: 96
    placeholder_text: '...  # TODO для начала нужно перевести текст в нижний регистр
      и не забыть что возвращается копия'
    initial_state:
      length: 96
      offset: 51
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: str_.lower()
  - offset: 245
    length: 86
    placeholder_text: '...:  # TODO с помощью метода строк isalpha будем проверять,
      является ли символ буквой'
    initial_state:
      length: 86
      offset: 245
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'char.isalpha():'
  - offset: 347
    length: 53
    placeholder_text: '...:  # TODOпроверяем есть ли уже символ среди ключей'
    initial_state:
      length: 53
      offset: 347
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'char in char_dict:'
  - offset: 417
    length: 51
    placeholder_text: '...  # TODO если есть, то увеличиваем значение на 1'
    initial_state:
      length: 51
      offset: 417
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: char_dict[char] += 1
  - offset: 503
    length: 62
    placeholder_text: '...  # TODO в противном случае создаем новый элемент в словаре'
    initial_state:
      length: 62
      offset: 503
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: char_dict[char] = 1
  - offset: 653
    length: 45
    placeholder_text: '...  # TODO найти сумму всех значений словаря'
    initial_state:
      length: 45
      offset: 653
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: sum(char_dict.values())
  - offset: 711
    length: 96
    placeholder_text: '...  # TODO с помощью dict comprehension возвращаем словарь
      с процентными соотношениями значений'
    initial_state:
      length: 96
      offset: 711
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: '{char: round(value / total_count, 3) for char, value
      in char_dict.items()}'
  text: "def get_count_char(str_: str) -> dict:\n\n    str_ = ...  # TODO для нача\
    ла нужно перевести текст в нижний регистр и не забыть что возвращается копия\n\
    \    char_dict = {}  # словарь для подсчета количества символов\n\n    for char\
    \ in str_:\n        if ...:  # TODO с помощью метода строк isalpha будем прове\
    рять, является ли символ буквой\n            if ...:  # TODOпроверяем есть ли\
    \ уже символ среди ключей\n                ...  # TODO если есть, то увеличива\
    ем значение на 1\n            else:\n                ...  # TODO в противном с\
    лучае создаем новый элемент в словаре\n    return char_dict\n\n\ndef frequency_chars(char_dict:\
    \ dict) -> dict:\n    total_count = ...  # TODO найти сумму всех значений слов\
    аря\n\n    return ...  # TODO с помощью dict comprehension возвращаем словарь\
    \ с процентными соотношениями значений\n\n\nif __name__ == \"__main__\":\n   \
    \ main_str = \"\"\"\n        Данное предложение будет разбиваться на отдельные\
    \ слова. \n        В качестве разделителя для встроенного метода split будет в\
    ыбран символ пробела. На выходе мы получим список отдельных слов. \n        Да\
    лее нужно отсортировать слова в алфавитном порядке, а после сортировки склеить\
    \ их с помощью метода строк join. Приступим!!!!\n    \"\"\"\n    chars_counter\
    \ = get_count_char(main_str)\n    print(frequency_chars(chars_counter))\n"
  learner_created: false
status: Unchecked
record: -1
